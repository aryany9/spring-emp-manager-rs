server.port=8081

# ====== DATABASE CONFIGURATION ======
spring.datasource.url=jdbc:postgresql://localhost:5432/demodb
spring.datasource.username=postgres
spring.datasource.password=1234
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ===== LDAP CONFIGURATION =====
# reference to the file that contain the seeded data
## Populate data from a file
## ldap data interchange format
## syntax to work with data just like SQL
spring.ldap.embedded.ldif=classpath:test-server.ldif
# tells embedded ldap what is the root node should be
spring.ldap.embedded.base-dn=dc=springframework,dc=org
# tell the local ldap what to do
spring.ldap.embedded.port=8389
# ===================================


# JWT RSA key pair
jwt.private.key=classpath:certs/rsa.private.key
jwt.public.key=classpath:certs/rsa.public.key

# Configuration specific to OAuth 2.0 Authorization Server
#Configuration for the core-client
authorization-server.client.core-client.client-id=${AUTH_SERVER_CORE_CLIENT_ID:core-client-id}
authorization-server.client.core-client.client-secret=${AUTH_SERVER_CORE_CLIENT_SECRET:core-client-secret}
# Configuration for the web-client
authorization-server.client.web-client.client-id=${AUTH_SERVER_WEB_CLIENT_ID:web-client-id}
authorization-server.client.web-client.client-secret=${AUTH_SERVER_WEB_CLIENT_SECRET:web-client-secret}
authorization-server.client.web-client.redirect-uri=${AUTH_SERVER_WEB_CLIENT_REDIRECT_URI:http://127.0.0.1:8081/login/oauth2/code/web-client-oidc}
authorization-server.client.web-client.post-logout-redirect-uri=${AUTH_SERVER_WEB_CLIENT_LOGOUT_REDIRECT_URI:http://127.0.0.1:4200/logged-out}

#LOGGING LEVEL
logging.level.root=INFO
logging.level.org.springframework.web=INFO
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.boot.autoconfigure=DEBUG
logging.level.org.springframework.security.oauth2.server=trace





